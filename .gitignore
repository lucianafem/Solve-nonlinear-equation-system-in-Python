import matplotlib.pyplot as plt
import numpy as np 
from scipy.optimize import fsolve


def equations(p):
    X, Y, Z = p
    y1 = X-Y**2 +3                  # parabolic
    y2 = X+Y+1                      # line
    y3 = X**2+Y**2-5                # radius circle: sqrt(5)  x**2+y**2=5 where y4=0
    return (y1,y2,y3)

X, Y, Z =  fsolve(equations, (-3, 2, 0))
print(np. around((X,Y),2))
X, Y, Z =  fsolve(equations, (2, -3, 0))
print(np. around((X,Y),2))

x = np.arange(-5,5,0.001) 
y = np.arange(-5, 5, 0.05)

X,Y = np.meshgrid(x,y)          # to draw the circle

y1 = X-Y**2 +3                  # parabolic
y2 = X+Y+1                      # line
y3 = X**2+Y**2-5                # radius circle: sqrt(5)  x**2+y**2=5 where y4=0
       
fig, ax = plt.subplots()

c1 = ax.contour(X,Y,y1,[0],colors='r')
c2 = ax.contour(X,Y,y2,[0],colors='g')
c3 = ax.contour(X,Y,y3,[0],colors='b')
h1,_ = c1.legend_elements()
h2,_ = c2.legend_elements()
h3,_ = c3.legend_elements()
plt.title('Nonlinear Equation Graphs')
ax.legend([h1[0], h2[0],h3[0]], ['parabolic', 'line','circle'])

major_ticks = np.arange(-5, 5, 1)    # eixo de -5 a 5 de 1 em 1
minor_ticks = np.arange(-5, 5, 0.5)  # eixo de -5 a 5 de 0.5 a 0.5

ax.set_xticks(major_ticks)
ax.set_xticks(minor_ticks, minor=True)
ax.set_yticks(major_ticks)
ax.set_yticks(minor_ticks, minor=True)

ax.grid(which='both')

ax.grid(which='minor', alpha=0.2)
ax.grid(which='major', alpha=0.8)

ax.scatter(np.array([-2,1]),np.array([1,-2]),marker='o',s=100,color='k')

plt.show()
